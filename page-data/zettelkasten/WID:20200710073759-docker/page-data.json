{"componentChunkName":"component---src-templates-zett-page-template-tsx","path":"/zettelkasten/WID:20200710073759-docker","result":{"data":{"site":{"siteMetadata":{"title":"Personal Notebook","subtitle":"Personal notebook","copyright":"Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Un-ported License","author":{"name":"Andrea Tupini","twitter":""},"disqusShortname":"","url":"https://tupini07.github.io"}},"mdx":{"id":"ff86fc67-3421-5291-af74-5f384594e617","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker\",\n  \"date\": \"2020-10-15T11:09:55.561716\",\n  \"wid\": \"WID:20200710073759-docker\",\n  \"layout\": \"zettelkasten\",\n  \"draft\": false,\n  \"external_reference\": \"https://www.docker.com/\",\n  \"wikidata_entity\": \"Q15206305\",\n  \"wikipedia_link\": \"https://en.wikipedia.org/wiki/Docker (software)\",\n  \"path\": \"/zettelkasten/WID:20200710073759-docker\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Docker is the main containerization technology\"), mdx(\"h1\", null, \"Tools\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"WID:20200710074024-portainer\"\n  }, \"!!Portainer\"), \" - a tool to manage\\ndocker installations via web interface. Supports both local and\\nremote installations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"WID:20200710080219-traefik\"\n  }, \"!!Traefik\"), \" - a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"super reverse proxy\"), \"\\nthat routes requests to linked services (be them exposed by Docker\\nor not).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"WID:20200710114254-watchtower\"\n  }, \"!!Watchtower\"), \" - A process for\\nautomating Docker container base image updates\")), mdx(\"h1\", null, \"Doing stuff\"), mdx(\"h2\", null, \"Connecting to a host port from inside a Docker container\"), mdx(\"p\", null, \"Suppose the case in which we have a DB server running on the host and\\nwant to connect to it from inside a docker container. An easy solution\\nfor this would be to use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"--network=host\"), \" when launching the container,\\nbut this is not always possible (or if you\\\\'re using Docker on Windows,\\nat least not today: \", \"[\", \"2020-10-15 Thu\", \"]\", \").\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In the future (pending the resolution of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/docker/for-linux/issues/264\"\n  }, \"this\\nissue\"), \") we can use\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"host.docker.internal\"), \" to access the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bridge\"), \" between container and\\nhost. Although this functionality seems to be working fine in MacOS and\\nWindows.\"), mdx(\"p\", null, \"In linux we can use the command \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ip a\"), \" to find the IP address of the\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"docker0\"), \" interface. We can then use this IP from within the container\\nto reference the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bridge\"), \". See\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/a/31328031/2234619\"\n  }, \"this\"), \" stackoverflow\\nanswer for more details.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"tagSlugs":null,"slug":"/zettelkasten/WID:20200710073759-docker"},"frontmatter":{"title":"Docker","tags":null,"date":"2020-10-15T11:09:55.561716","wid":"WID:20200710073759-docker","wikidata_entity":"Q15206305","wikipedia_link":"https://en.wikipedia.org/wiki/Docker (software)","external_reference":"https://www.docker.com/"}}},"pageContext":{"slug":"/zettelkasten/WID:20200710073759-docker"}},"staticQueryHashes":["1512840792","4037150233","876543683"]}