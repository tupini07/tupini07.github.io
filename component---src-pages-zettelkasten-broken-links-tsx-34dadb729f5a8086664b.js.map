{"version":3,"sources":["webpack:///./src/pages/zettelkasten-broken-links.tsx"],"names":["ZettBrokenLinkRoute","data","zettPages","location","site","siteMetadata","title","allMdx","nodes","findLinksInAST","root","type","url","startsWith","wid","children","find","e","value","links","c","concat","pageBrokenLinks","map","pageWID","frontmatter","pageTitle","pageSlug","fields","slug","brokenLinks","mdxAST","filter","x","p","length","reduce","acc","key","to","l","className"],"mappings":"o9BAmEeA,UA/Da,SAAC,GAKxB,IAJDC,EAIC,EAJDA,KAMIC,GAFH,EAJKC,SAKUF,EAAKG,KAAKC,aAApBC,MACUL,EAAKM,OAAOC,OAExBC,EAAiB,SAAjBA,EAAkBC,GAAc,MACpC,GAAkB,SAAdA,EAAKC,MAAmBD,EAAKE,IAAIC,WAAW,QAC9C,MAAO,CACLC,IAAKJ,EAAKE,IACVN,OAAO,UAAAI,EAAKK,SAASC,MAAK,SAAAC,GAAC,MAAe,SAAXA,EAAEN,eAA1B,eAA4CO,QAAS,YAE3D,GAAIR,EAAKK,SAAU,CAEtB,IADA,IACA,EADII,EAAQ,GACZ,IAAgBT,EAAKK,YAArB,aAA+B,KAApBK,EAAoB,QAC7BD,EAAQA,EAAME,OAAOZ,EAAeW,IAEtC,OAAOD,EAEP,MAAO,IAILG,EAAkBpB,EACrBqB,KAAI,SAAAN,GACH,MAAO,CACLO,QAASP,EAAEQ,YAAYX,IACvBY,UAAWT,EAAEQ,YAAYnB,MACzBqB,SAAUV,EAAEW,OAAOC,KACnBC,YAAarB,EAAeQ,EAAEc,QAAQC,QAAO,SAAAC,GAC3C,OAAQ/B,EAAUc,MAAK,SAAAkB,GAAC,OAAIA,EAAET,YAAYX,MAAQmB,EAAEnB,cAIzDkB,QAAO,SAAAf,GAAC,OAAIA,EAAEa,YAAYK,OAAS,KAEtC,OACE,6BACE,qDACwBb,EAAgBc,QAAO,SAACC,EAAKpB,GAAN,OAAYoB,EAAMpB,EAAEa,YAAYK,SAAQ,GADvF,KAGCb,EAAgBC,KAAI,SAAAN,GAAC,OACpB,yBAAKqB,IAAG,QAAUrB,GAChB,qCACQ,kBAAC,OAAD,CAAMsB,GAAItB,EAAEU,UAAWV,EAAES,WAAkB,KAEnD,4BACGT,EAAEa,YAAYP,KAAI,SAAAiB,GAAC,OAClB,wBAAIF,IAAG,QAAUE,EAAE1B,KAAnB,UACS,0BAAM2B,UAAU,iBAAiBD,EAAElC,OAD5C,UACiE,IAC/D,0BAAMmC,UAAU,iBAAiBD,EAAE1B","file":"component---src-pages-zettelkasten-broken-links-tsx-34dadb729f5a8086664b.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport React from 'react';\n// import { ZettBrokenLinksQuery } from '../graphql';\n\nconst ZettBrokenLinkRoute = (\n  { data, location } /*: {\n  data: ZettBrokenLinksQuery;\n  location: string;\n}*/\n) => {\n  const { title } = data.site.siteMetadata;\n  const zettPages = data.allMdx.nodes;\n\n  const findLinksInAST = (root): any => {\n    if (root.type === 'link' && root.url.startsWith('WID:'))\n      return {\n        wid: root.url,\n        title: root.children.find(e => e.type === 'text')?.value || 'NO-TITLE'\n      };\n    else if (root.children) {\n      let links = [];\n      for (const c of root.children) {\n        links = links.concat(findLinksInAST(c));\n      }\n      return links;\n    } else {\n      return [];\n    }\n  };\n\n  const pageBrokenLinks = zettPages\n    .map(e => {\n      return {\n        pageWID: e.frontmatter.wid,\n        pageTitle: e.frontmatter.title,\n        pageSlug: e.fields.slug,\n        brokenLinks: findLinksInAST(e.mdxAST).filter(x => {\n          return !zettPages.find(p => p.frontmatter.wid === x.wid);\n        })\n      };\n    })\n    .filter(e => e.brokenLinks.length > 0);\n\n  return (\n    <div>\n      <div>\n        Broken Links (Total: {pageBrokenLinks.reduce((acc, e) => acc + e.brokenLinks.length, 0)})\n      </div>\n      {pageBrokenLinks.map(e => (\n        <div key={`item-${e}`}>\n          <h4>\n            Page: <Link to={e.pageSlug}>{e.pageTitle}</Link>{' '}\n          </h4>\n          <ul>\n            {e.brokenLinks.map(l => (\n              <li key={`item-${l.wid}`}>\n                Title: <code className='language-text'>{l.title}</code> - WID:{' '}\n                <code className='language-text'>{l.wid}</code>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ZettBrokenLinkRoute;\n\nexport const pageQuery = graphql`\n  query ZettBrokenLinks {\n    allMdx(filter: { frontmatter: { layout: { eq: \"zettelkasten\" }, draft: { ne: true } } }) {\n      nodes {\n        mdxAST\n        frontmatter {\n          title\n          wid\n        }\n        fields {\n          slug\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}